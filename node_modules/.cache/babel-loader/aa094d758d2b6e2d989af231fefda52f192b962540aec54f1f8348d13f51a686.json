{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\workplace\\\\projects\\\\algo_projects\\\\mazevisualize\\\\src\\\\Visualize\\\\Visualize.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Node from '../Node/Node';\nimport { Dijkstras, getNodesInShortestPathOrder } from '../Algo/Dijkstras';\nimport './Visualize.css';\n\n// Set default values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\n// Initial grid\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\n// Create node in grid\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\nexport default function Visualize() {\n  _s();\n  const [grid, setGrid] = useState(getInitialGrid());\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  // Change to new grid\n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n\n  // Mouse handling\n  const handleMouseDown = (row, col) => {\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n    setMouseIsPressed(true);\n  };\n  const handleMouseEnter = (row, col) => {\n    if (!mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n  };\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  };\n\n  // Hande Dijkstras algo\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 5 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 5 * i);\n    }\n  };\n  const handleDijkstras = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = Dijkstras(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  };\n  const animateShortestPath = nodesInShortestPathOrder => {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleDijkstras(),\n      children: \"Visualize Dijkstra's Algorithm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIdx) => {\n            const {\n              row,\n              col,\n              isFinish,\n              isStart,\n              isWall\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              col: col,\n              isFinish: isFinish,\n              isStart: isStart,\n              isWall: isWall,\n              mouseIsPressed: mouseIsPressed,\n              onMouseDown: (row, col) => handleMouseDown(row, col),\n              onMouseEnter: (row, col) => handleMouseEnter(row, col),\n              onMouseUp: () => handleMouseUp(),\n              row: row\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 37\n            }, this);\n          })\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Visualize, \"I6Co4/x3wcvBLmWW4JIPiQCT1pM=\");\n_c = Visualize;\nvar _c;\n$RefreshReg$(_c, \"Visualize\");","map":{"version":3,"names":["React","useState","Node","Dijkstras","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","getInitialGrid","grid","row","currentRow","col","push","createNode","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","Visualize","setGrid","mouseIsPressed","setMouseIsPressed","getNewGridWithWallToggled","newGrid","slice","node","newNode","handleMouseDown","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","document","getElementById","className","handleDijkstras","startNode","finishNode","map","rowIdx","nodeIdx"],"sources":["C:/Users/Lenovo/Desktop/workplace/projects/algo_projects/mazevisualize/src/Visualize/Visualize.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Node from '../Node/Node';\r\nimport { Dijkstras, getNodesInShortestPathOrder } from '../Algo/Dijkstras';\r\nimport './Visualize.css';\r\n\r\n// Set default values\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\n// Initial grid\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 50; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\n// Create node in grid\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\n\r\nexport default function Visualize() {\r\n\r\n    const [grid, setGrid] = useState(getInitialGrid());\r\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n\r\n    // Change to new grid\r\n    const getNewGridWithWallToggled = (grid, row, col) => {\r\n        const newGrid = grid.slice();\r\n        const node = newGrid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall,\r\n        };\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    };\r\n\r\n    // Mouse handling\r\n    const handleMouseDown = (row, col) => {\r\n        const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n        setGrid(newGrid);\r\n        setMouseIsPressed(true);\r\n    }\r\n\r\n    const handleMouseEnter = (row, col) => {\r\n        if (!mouseIsPressed) return;\r\n        const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    const handleMouseUp = () => {\r\n        setMouseIsPressed(false);\r\n    }\r\n\r\n    // Hande Dijkstras algo\r\n    const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    animateShortestPath(nodesInShortestPathOrder);\r\n                }, 5 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-visited';\r\n            }, 5 * i);\r\n        }\r\n    }\r\n\r\n    \r\n    const handleDijkstras = () => {\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = Dijkstras(grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n    \r\n    const animateShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-shortest-path';\r\n            }, 50 * i);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <button onClick={() => handleDijkstras()}>\r\n                Visualize Dijkstra's Algorithm\r\n            </button>\r\n            <div className=\"grid\">\r\n                {grid.map((row, rowIdx) => {\r\n                    return (\r\n                        <div key={rowIdx}>\r\n                            {row.map((node, nodeIdx) => {\r\n                                const { row, col, isFinish, isStart, isWall } = node;\r\n                                return (\r\n                                    <Node\r\n                                        key={nodeIdx}\r\n                                        col={col}\r\n                                        isFinish={isFinish}\r\n                                        isStart={isStart}\r\n                                        isWall={isWall}\r\n                                        mouseIsPressed={mouseIsPressed}\r\n                                        onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                                        onMouseEnter={(row, col) =>\r\n                                            handleMouseEnter(row, col)\r\n                                        }\r\n                                        onMouseUp={() => handleMouseUp()}\r\n                                        row={row}></Node>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}