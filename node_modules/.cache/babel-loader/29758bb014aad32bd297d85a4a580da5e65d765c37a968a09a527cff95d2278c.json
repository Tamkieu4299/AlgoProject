{"ast":null,"code":"export function BFS(grid, start, end) {\n  const visitedNodesInOrder = [];\n  let queue = [];\n  queue.push(start);\n  start.distance = 0;\n  while (queue.length > 0) {\n    const current = queue.shift();\n    if (current.isWall) continue;\n    if (current.distance === Infinity) return visitedNodesInOrder;\n    if (current.isVisited) continue;\n    current.isVisited = true;\n    visitedNodesInOrder.push(current);\n    if (current === end) return visitedNodesInOrder;\n    const {\n      col,\n      row\n    } = current;\n    if (row > 0) {\n      grid[row - 1][col].distance = Math.min(current.distance + 1, grid[row - 1][col].distance);\n      grid[row - 1][col].previousNode = current;\n      queue.push(grid[row - 1][col]);\n    }\n    if (row < grid.length - 1) {\n      grid[row + 1][col].distance = Math.min(current.distance + 1, grid[row + 1][col].distance);\n      grid[row + 1][col].previousNode = current;\n      queue.push(grid[row + 1][col]);\n    }\n    if (col > 0) {\n      grid[row][col - 1].distance = Math.min(current.distance + 1, grid[row][col - 1].distance);\n      grid[row][col - 1].previousNode = current;\n      queue.push(grid[row][col - 1]);\n    }\n    if (col < grid[0].length - 1) {\n      grid[row][col + 1].distance = Math.max(current.distance + 1, grid[row][col + 1].distance);\n      grid[row][col + 1].previousNode = current;\n      queue.push(grid[row][col + 1]);\n    }\n  }\n}\n_c = BFS;\nexport function getNodesInShortestPathOrder_BFS(end) {\n  const nodesInShortestPathOrder = [];\n  let current = end;\n  while (current) {\n    nodesInShortestPathOrder.unshift(current);\n    current = current.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\nvar _c;\n$RefreshReg$(_c, \"BFS\");","map":{"version":3,"names":["BFS","grid","start","end","visitedNodesInOrder","queue","push","distance","length","current","shift","isWall","Infinity","isVisited","col","row","Math","min","previousNode","max","getNodesInShortestPathOrder_BFS","nodesInShortestPathOrder","unshift"],"sources":["C:/Users/Lenovo/Desktop/workplace/projects/algo_projects/mazevisualize/src/Algo/Bfs.jsx"],"sourcesContent":["export function BFS(grid, start, end) {\r\n    const visitedNodesInOrder = [];\r\n    let queue = []\r\n    queue.push(start);\r\n    start.distance = 0;\r\n\r\n    while (queue.length > 0) {\r\n        const current = queue.shift();\r\n        if (current.isWall) continue;\r\n        if (current.distance === Infinity) return visitedNodesInOrder;\r\n        if (current.isVisited) continue;\r\n\r\n        current.isVisited = true;\r\n        visitedNodesInOrder.push(current);\r\n        if (current === end) return visitedNodesInOrder;\r\n\r\n        const { col, row } = current;\r\n        if (row > 0) {\r\n            grid[row - 1][col].distance = Math.min(current.distance + 1, grid[row - 1][col].distance);\r\n            grid[row - 1][col].previousNode = current;\r\n            queue.push(grid[row - 1][col]);\r\n        }\r\n        if (row < grid.length - 1) {\r\n            grid[row + 1][col].distance = Math.min(current.distance + 1, grid[row + 1][col].distance);\r\n            grid[row + 1][col].previousNode = current;\r\n            queue.push(grid[row + 1][col]);\r\n        }\r\n        if (col > 0) {\r\n            grid[row][col - 1].distance = Math.min(current.distance + 1, grid[row][col - 1].distance);\r\n            grid[row][col - 1].previousNode = current;\r\n            queue.push(grid[row][col - 1]);\r\n        }\r\n        if (col < grid[0].length - 1) {\r\n            grid[row][col + 1].distance = Math.max(current.distance + 1, grid[row][col + 1].distance);\r\n            grid[row][col + 1].previousNode = current;\r\n            queue.push(grid[row][col + 1]);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getNodesInShortestPathOrder_BFS(end) {\r\n    const nodesInShortestPathOrder = [];\r\n    let current = end;\r\n    while (current) {\r\n        nodesInShortestPathOrder.unshift(current);\r\n        current = current.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}