{"ast":null,"code":"export function BFS(grid, start, end) {\n  const visitedNodesInOrder = [];\n  let queue = [];\n  queue.push(start);\n  start.distance = 0;\n  while (queue.length > 0) {\n    const current = queue.shift();\n    if (current.isWall) continue;\n    if (current.distance === Infinity) return visitedNodesInOrder;\n    if (current.isVisited) continue;\n    current.isVisited = true;\n    visitedNodesInOrder.push(current);\n    if (current === end) return visitedNodesInOrder;\n    let neighbors = [];\n    const {\n      col,\n      row\n    } = current;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    neighbors = neighbors.filter(neighbor => !neighbor.isVisited);\n    neighbors.map(neighbor => queue.push(neighbor));\n    for (const neighbor of neighbors) {\n      neighbor.distance = current.distance + 1;\n      neighbor.previousNode = current;\n    }\n  }\n  console.log(visitedNodesInOrder);\n}\n_c = BFS;\nexport function getNodesInShortestPathOrder_BFS(end) {\n  const nodesInShortestPathOrder = [];\n  let current = end;\n  while (current) {\n    nodesInShortestPathOrder.unshift(current);\n    current = current.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\nvar _c;\n$RefreshReg$(_c, \"BFS\");","map":{"version":3,"names":["BFS","grid","start","end","visitedNodesInOrder","queue","push","distance","length","current","shift","isWall","Infinity","isVisited","neighbors","col","row","filter","neighbor","map","previousNode","console","log","getNodesInShortestPathOrder_BFS","nodesInShortestPathOrder","unshift"],"sources":["C:/Users/Lenovo/Desktop/workplace/projects/algo_projects/mazevisualize/src/Algo/Bfs.jsx"],"sourcesContent":["export function BFS(grid, start, end) {\r\n    const visitedNodesInOrder = [];\r\n    let queue = []\r\n    queue.push(start);\r\n    start.distance = 0;\r\n\r\n    while (queue.length > 0) {\r\n        const current = queue.shift();\r\n        if (current.isWall) continue;\r\n        if (current.distance === Infinity) return visitedNodesInOrder;\r\n        if (current.isVisited) continue;\r\n\r\n        current.isVisited = true;\r\n        visitedNodesInOrder.push(current);\r\n        if (current === end) return visitedNodesInOrder;\r\n\r\n        let neighbors = [];\r\n        const { col, row } = current;\r\n        if (row > 0) neighbors.push(grid[row - 1][col]);\r\n        if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n        if (col > 0) neighbors.push(grid[row][col - 1]);\r\n        if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n        neighbors = neighbors.filter(neighbor => !neighbor.isVisited);\r\n        neighbors.map(neighbor => queue.push(neighbor))\r\n        for (const neighbor of neighbors) {\r\n            neighbor.distance = current.distance + 1;\r\n            neighbor.previousNode = current;\r\n        }\r\n    }\r\n    console.log(visitedNodesInOrder)\r\n}\r\n\r\nexport function getNodesInShortestPathOrder_BFS(end) {\r\n    const nodesInShortestPathOrder = [];\r\n    let current = end;\r\n    while (current) {\r\n        nodesInShortestPathOrder.unshift(current);\r\n        current = current.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}"],"mappings":"AAAA,OAAO,SAASA,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAE;EAClC,MAAMC,mBAAmB,GAAG,EAAE;EAC9B,IAAIC,KAAK,GAAG,EAAE;EACdA,KAAK,CAACC,IAAI,CAACJ,KAAK,CAAC;EACjBA,KAAK,CAACK,QAAQ,GAAG,CAAC;EAElB,OAAOF,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;IACrB,MAAMC,OAAO,GAAGJ,KAAK,CAACK,KAAK,EAAE;IAC7B,IAAID,OAAO,CAACE,MAAM,EAAE;IACpB,IAAIF,OAAO,CAACF,QAAQ,KAAKK,QAAQ,EAAE,OAAOR,mBAAmB;IAC7D,IAAIK,OAAO,CAACI,SAAS,EAAE;IAEvBJ,OAAO,CAACI,SAAS,GAAG,IAAI;IACxBT,mBAAmB,CAACE,IAAI,CAACG,OAAO,CAAC;IACjC,IAAIA,OAAO,KAAKN,GAAG,EAAE,OAAOC,mBAAmB;IAE/C,IAAIU,SAAS,GAAG,EAAE;IAClB,MAAM;MAAEC,GAAG;MAAEC;IAAI,CAAC,GAAGP,OAAO;IAC5B,IAAIO,GAAG,GAAG,CAAC,EAAEF,SAAS,CAACR,IAAI,CAACL,IAAI,CAACe,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAAC;IAC/C,IAAIC,GAAG,GAAGf,IAAI,CAACO,MAAM,GAAG,CAAC,EAAEM,SAAS,CAACR,IAAI,CAACL,IAAI,CAACe,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAAC;IAC7D,IAAIA,GAAG,GAAG,CAAC,EAAED,SAAS,CAACR,IAAI,CAACL,IAAI,CAACe,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC,CAAC;IAC/C,IAAIA,GAAG,GAAGd,IAAI,CAAC,CAAC,CAAC,CAACO,MAAM,GAAG,CAAC,EAAEM,SAAS,CAACR,IAAI,CAACL,IAAI,CAACe,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC,CAAC;IAChED,SAAS,GAAGA,SAAS,CAACG,MAAM,CAACC,QAAQ,IAAI,CAACA,QAAQ,CAACL,SAAS,CAAC;IAC7DC,SAAS,CAACK,GAAG,CAACD,QAAQ,IAAIb,KAAK,CAACC,IAAI,CAACY,QAAQ,CAAC,CAAC;IAC/C,KAAK,MAAMA,QAAQ,IAAIJ,SAAS,EAAE;MAC9BI,QAAQ,CAACX,QAAQ,GAAGE,OAAO,CAACF,QAAQ,GAAG,CAAC;MACxCW,QAAQ,CAACE,YAAY,GAAGX,OAAO;IACnC;EACJ;EACAY,OAAO,CAACC,GAAG,CAAClB,mBAAmB,CAAC;AACpC;AAAC,KA9BeJ,GAAG;AAgCnB,OAAO,SAASuB,+BAA+B,CAACpB,GAAG,EAAE;EACjD,MAAMqB,wBAAwB,GAAG,EAAE;EACnC,IAAIf,OAAO,GAAGN,GAAG;EACjB,OAAOM,OAAO,EAAE;IACZe,wBAAwB,CAACC,OAAO,CAAChB,OAAO,CAAC;IACzCA,OAAO,GAAGA,OAAO,CAACW,YAAY;EAClC;EACA,OAAOI,wBAAwB;AACnC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}